# === Project specific ===
**.txt


# Temporarily
**/pyproject.toml
**/__main__.py
**/__init__.py


# === Python ===

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.eggs/
.installed.cfg
.Python
*.egg
*.egg-info/
build/
develop-eggs/
dist/
downloads/
eggs/
lib/
lib64/
MANIFEST
parts/
sdist/
share/python-wheels/
var/
wheels/

# Unit test / coverage reports
.cache
.coverage
.coverage.*
.hypothesis/
.nox/
.pytest_cache/
.tox/
*.cover
*.py,cover
cover/
coverage.xml
htmlcov/
nosetests.xml

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Environments
.env
.venv
env.bak/
env/
ENV/
venv.bak/
venv/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json


# === Rust ===
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# RustRover
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/


# === Editor ===
*.sublime-workspace
*.sublime-project
**/.vscode
